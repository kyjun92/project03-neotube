<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="game">
	<!-- Read :: 메인페이지 동영상 목록 호출 -->
	<select id="game_list" parameterType="String" resultType="videoVO">
		select video_id, video_title, play_num, video_date, channel_id, thumbnail from video  
		<!-- video 테이블에서 필요 컬럼 내용들을 select -->
		where category="game" and video_id not in (select video_id from user_record where user_id = #{user_id}) 
		<!-- 조건 : 카테고리 game && (서브쿼리 : user_record 안의 로그인한 회원의 아이디가 조회한 영상은 제외) -->
	</select>
	<!-- Read :: 인기 페이지 동영상 목록 호출 -->
	<select id="popular_list" resultType="videoVO">
		select video_id, video_title, play_num, video_date, channel_id, thumbnail from video
		<!-- video 테이블에서 필요 컬럼 내용들을 select -->
		where category="game" order by play_num desc
		<!-- 조건 : 카테고리 game // 조회수 오른차순으로 정렬 -->
	</select>
	<!-- Read :: 구독페이지 동영상 목록 호출 -->
	<select id="subscribe_list" parameterType="String"
		resultType="videoVO">
		select video_id, video_title, play_num, video_date, channel_id, thumbnail from video 
		<!-- video table에서 필요 내용 select -->
		where channel_id in ( select channel_id
		from subscribe where user_id = #{user_id}
		and subscribe = true) order by video_date desc 
		<!-- 조건 : (서브쿼리 : 사용자가 구독한 채널을 subscribe table에서 select -> 조건: 로그인된 아이디만)
		 // 영상 업로드 날짜 기준 오름차순으로 정렬 -->
	</select>
	<!-- Read :: 좋아요한페이지 동영상 목록 호출 -->
	<select id="likeVideo_list" parameterType="String"
		resultType="videoVO">
		select video_id, video_title, play_num, video_date, channel_id, thumbnail from video
		<!-- video table에서 필요 내용 select -->
		where video_id in (
		select video_id from user_like
		where user_id = #{user_id} and like_index =1) order by video_date desc;
		<!-- 조건 : (서브쿼리 : user_like table에서 로그인한 아이디 && like_index == 1) 
		// 영상 업로드 날짜 기준 오름차순 정렬 -->
	</select>
	<!-- Read :: 시청했던 동영상 목록 호출 -->
	<select id="userRecordVideo_list" resultType="videoVO">
		select v.video_id, v.video_title, v.play_num, v.video_date, v.channel_id, v.thumbnail,
		max(ur.record_date) from video v 
		<!-- video table에서 필요 내용 select ( 기록 날짜 == 제일 최근 날짜 순으로) -->
		join user_record ur on v.video_id = ur.video_id where ur.user_id=#{userId} group by video_id 
		order by max(ur.record_date) desc
		<!-- join : video <= user_record ^ video_id 로 연결 
		// 조건 : 로그인된 유저의 아이디 && video_id grouping // 가장 최근 날짜로-->
	</select>
	<!-- Read :: 비디오 플레이 페이지 정보 -->
	<select id="playingVideo" parameterType="String"
		resultType="videoVO">
		<!-- 유저가 요청한 동영상의 정보 select -->
		select * from video where video_id = #{video_id}
	</select>
	<!-- Read :: 재생중인 동영상의 업로드 채널의 정보 -->
	<select id="selectChannel" parameterType="String"
		resultType="channelVO">
		<!-- 유저가 요청한 동영상의 채널 정보 select -->
		select * from channel where channel_id = #{id}
	</select>
	<!-- Read :: 재생중인 동영상의 non/like/dislike 정보 -->
	<select id="selectLike" parameterType="userLikeVO" resultType="userLikeVO">
		<!-- 유저가 요청한 동영상의 좋아요 or 싫어요 정보 select -->
		select * from user_like where user_id = #{user_id} and video_id = #{video_id}
	</select>
	<!-- Create :: 재생중인 동영상의 row가 table에 없을 경우 like=non 추가 -->
	<insert id="insertUserLike" parameterType="userLikeVO">
	<!-- 유저가 처음 조회한 영상이면 user_like table 새로운 record 생성 -->
		insert into user_like values(#{user_id},#{video_id},'0')
	</insert>
	<!-- Update :: 재생한 동영상의 조회수를 1회 증가 -->
	<update id="updatePlaynum">
	<!-- 영상이 조회 됬을 때, 그 영상의 조회수 +1 -->
		update video set play_num=play_num+1 where video_id = #{id}
	</update>
	<!-- Create :: 재생한 동영상의 video_id를 record -->
	<insert id="insertUserRecord" parameterType="userRecordVO">
		insert into user_record values(#{user_id},#{video_id},now())
	</insert>
	<!-- Update :: 수정한 like 정보를 수정 -->
	<update id="updateLike" parameterType="userLikeVO">
	<!-- 유저가 동영상의 좋아요 정보를 수정했을 때, 바뀐 정보 업데이트 -->
		update user_like set
		like_index = #{like_index} where user_id = #{user_id} and video_id =
		#{video_id}
	</update>
	<!-- Update :: 수정한 like 정보로 video table의 좋아요/싫어요 숫자 수정 -->
	<update id="updateLikenum" parameterType="java.util.HashMap">
		update video set
		like_num = like_num ${like}, dislike_num = dislike_num ${dislike}
		where video_id = #{videoId}
	</update>
	<!-- Create :: user_record 정규분포 랜덤값 생성 -->
	<insert id="randomRecord" parameterType="userVO">
		insert into user_record values('kyjun92',#{vId},now())
	</insert>
	<!-- Select :: user_record 에서 특정 user_id의 조회수를 가져옴 -->
	<select id="recommand" parameterType="String" resultType="recoVO">
		select count(user_id) as views from user_record where user_id = #{user_id}
	</select>


</mapper>
